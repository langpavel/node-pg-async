{
  "env": {
    "node": true
  },
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module",
    "ecmaFeatures": {
      "modules": true
    }
  },
  "plugins": ["import"],
  "rules": {
    // enforces getter/setter pairs in objects
    "accessor-pairs": 0,
    // treat var statements as if they were block scoped
    "block-scoped-var": 2,
    // specify the maximum cyclomatic complexity allowed in a program
    "complexity": [0, 11],
    // require return statements to either always or never specify values
    "consistent-return": 2,
    // specify curly brace conventions for all control statements
    "curly": [2, "multi", "consistent"],
    // require default case in switch statements
    "default-case": 2,
    // encourages use of dot notation whenever possible
    "dot-notation": [2, { "allowKeywords": true }],
    // enforces consistent newlines before or after dots
    "dot-location": 0,
    // require the use of === and !==
    "eqeqeq": 2,
    // make sure for-in loops have an if statement
    "guard-for-in": 2,
    // disallow the use of alert, confirm, and prompt
    "no-alert": 1,
    // disallow use of arguments.caller or arguments.callee
    "no-caller": 2,
    // disallow lexical declarations in case/default clauses
    // http://eslint.org/docs/rules/no-case-declarations.html
    "no-case-declarations": 2,
    // disallow division operators explicitly at beginning of regular expression
    "no-div-regex": 0,
    // disallow else after a return in an if
    "no-else-return": 2,
    // disallow comparisons to null without a type-checking operator
    "no-eq-null": 0,
    // disallow use of eval()
    "no-eval": 2,
    // disallow adding to native types
    "no-extend-native": 2,
    // disallow unnecessary function binding
    "no-extra-bind": 2,
    // disallow fallthrough of case statements
    "no-fallthrough": 2,
    // disallow the use of leading or trailing decimal points in numeric literals
    "no-floating-decimal": 2,
    // disallow the type conversions with shorter notations
    "no-implicit-coercion": 0,
    // disallow use of eval()-like methods
    "no-implied-eval": 2,
    // disallow this keywords outside of classes or class-like objects
    "no-invalid-this": 0,
    // disallow usage of __iterator__ property
    "no-iterator": 2,
    // disallow use of labeled statements
    "no-labels": 2,
    // disallow unnecessary nested blocks
    "no-lone-blocks": 2,
    // disallow creation of functions within loops
    "no-loop-func": 2,
    // disallow use of multiple spaces
    "no-multi-spaces": 2,
    // disallow use of multiline strings
    "no-multi-str": 2,
    // disallow reassignments of native objects
    "no-native-reassign": 2,
    // disallow use of new operator when not part of the assignment or comparison
    "no-new": 2,
    // disallow use of new operator for Function object
    "no-new-func": 2,
    // disallows creating new instances of String,Number, and Boolean
    "no-new-wrappers": 2,
    // disallow use of (old style) octal literals
    "no-octal": 2,
    // disallow use of octal escape sequences in string literals, such as
    // var foo = "Copyright \251";
    "no-octal-escape": 2,
    // disallow use of process.env
    "no-process-env": 0,
    // disallow usage of __proto__ property
    "no-proto": 2,
    // disallow declaring the same variable more then once
    "no-redeclare": 2,
    // disallow use of assignment in return statement
    "no-return-assign": 2,
    // disallow use of `javascript:` urls.
    "no-script-url": 2,
    // disallow comparisons where both sides are exactly the same
    "no-self-compare": 2,
    // disallow use of comma operator
    "no-sequences": 2,
    // restrict what can be thrown as an exception
    "no-throw-literal": 2,
    // disallow usage of expressions in statement position
    "no-unused-expressions": 1,
    // disallow unnecessary .call() and .apply()
    "no-useless-call": 0,
    // disallow use of void operator
    "no-void": 0,
    // disallow usage of configurable warning terms in comments: e.g. todo
    "no-warning-comments": [
      0,
      { "terms": ["todo", "fixme", "xxx"], "location": "start" }
    ],
    // disallow use of the with statement
    "no-with": 2,
    // require use of the second argument for parseInt()
    "radix": 2,
    // requires to declare all vars on top of their containing scope
    "vars-on-top": 2,
    // require immediate function invocation to be wrapped in parentheses
    // http://eslint.org/docs/rules/wrap-iife.html
    "wrap-iife": [2, "outside"],
    // require or disallow Yoda conditions
    "yoda": 2,
    // enforce return after a callback
    "callback-return": 0,
    // enforces error handling in callbacks (node environment)
    "handle-callback-err": 0,
    // disallow mixing regular variable and require declarations
    "no-mixed-requires": [0, false],
    // disallow use of new operator with the require function
    "no-new-require": 0,
    // disallow string concatenation with __dirname and __filename
    "no-path-concat": 0,
    // disallow process.exit()
    "no-process-exit": 0,
    // restrict usage of specified node modules
    "no-restricted-modules": 0,
    // disallow use of synchronous methods (off by default)
    "no-sync": 0,
    // enforces no braces where they can be omitted
    // http://eslint.org/docs/rules/arrow-body-style
    "arrow-body-style": [1, "as-needed"],
    // require parens in arrow function arguments
    "arrow-parens": 0,
    // require space before/after arrow function"s arrow
    // https://github.com/eslint/eslint/blob/master/docs/rules/arrow-spacing.md
    "arrow-spacing": [1, { "before": true, "after": true }],
    // verify super() callings in constructors
    "constructor-super": 0,
    // enforce the spacing around the * in generator functions
    "generator-star-spacing": 0,
    // disallow modifying variables of class declarations
    "no-class-assign": 0,
    // disallow modifying variables that are declared using const
    "no-const-assign": 2,
    // disallow to use this/super before super() calling in constructors.
    "no-this-before-super": 0,
    // require let or const instead of var
    "no-var": 2,
    // require method and property shorthand syntax for object literals
    // https://github.com/eslint/eslint/blob/master/docs/rules/object-shorthand.md
    "object-shorthand": [2, "always"],
    // suggest using arrow functions as callbacks
    "prefer-arrow-callback": 2,
    // suggest using of const declaration for variables that are never modified after declared
    "prefer-const": 1,
    // suggest using the spread operator instead of .apply()
    "prefer-spread": 0,
    // suggest using Reflect methods where applicable
    "prefer-reflect": 0,
    // suggest using template literals instead of string concatenation
    // http://eslint.org/docs/rules/prefer-template
    "prefer-template": 1,
    // disallow generator functions that do not have yield
    "require-yield": 0,
    "import/default": 2,
    "import/export": 2,
    "import/named": 2,
    "import/namespace": 2,
    "import/no-unresolved": [2, { "commonjs": true, "amd": true }],
    "new-cap": [2, { "capIsNew": false, "newIsCap": true }],
    "no-console": 1,
    "no-shadow": 1,
    "no-unused-vars": 1,
    "no-use-before-define": [2, "nofunc"],
    "object-curly-spacing": [2, "always"],
    "padded-blocks": 0,
    "spaced-comment": 1,
    "strict": [2, "never"],
    "semi": [1, "always"]
  },
  "globals": {
    "require": false
  },
  "settings": {
    "import/ignore": ["node_modules", "lib", "\\.json$"],
    "import/parser": "babel-eslint",
    "import/resolve": {
      "extensions": [".js", ".json"]
    }
  }
}
